1)  

first alert: 	25 
second alert: 	81 
third alert: 	2 
fourth alert:	undefined 

alert(typedof(cuadradoDeA)) : esto arroja el tipo 'undefined' ya que en ningun momento
	del script se define el tipo de la funcion. Esto es posible ya que javascript es
	un lenguaje d√©bilmente tipado. 

2) Para mostrar s2 : "Hello World!", pero con todas sus letras en minuscula, podemos
	usar la misma logica del "alert(s2.toUpperCase())", pero con una funcion que haga 
	lo pedido. Tal es el caso de "toLowerCase()", por lo que el ejercicio quedaria
	asi:

	var s2 = "Hello World!";
	alert(s2.toUpperCase()); //<- retorna el alerta "HELLO WORLD!" 
	alert(s2.toLowerCase()); //<- retorna el alerta "hello world!"

3) mostrar(console.log("Openbravo!!!"));

4) Una matriz es una arreglo bidimencional, el cual tiene la misma cantidad de
columnas que de filas. Una matriz diagonal es aquella matriz cuyos elementos por arriba 
y por debajo de la diagonal (desde arriba a la izquierda hasta abajo a la derecha) 
son iguales a 0(cero).
La funcion matrizDiagonal() toma como parametro un arreglo bidimencional y retorna un
booleano, true si se trata de una matriz diagonal o falso caso contrario.

	//Tomando los ejemplos del ejercicio
	var matriz1 = [[1,0,0],[0,2,0],[0,0,3]];
	var matriz2 = [[1,0,0],[0,2,0],[0,2,3]];

	//Para este caso hay que tener en consideracion que las matrices
	//van a ser de 3x3, por lo que:
	var columna = 3;
	var fila = 3;

	function matrizDiagonal(arreglo){
      	let i=0;
            let j=0;

            while(j < fila){
                while(i < columna){
                    if(i != j){
                        if(arreglo[i][j] != 0){
                            return false;
                        }
                    }
                    i ++;
                }
                i=0;
                j++;
            }
            return true;
        }

        alert(matrizDiagonal(matriz1)); //<- retorna true
        alert(matrizDiagonal(matriz2)); //<- retorna false


///////////////
React Exercises
//////////////

1) What are props in a component?
	- Are the component parameters
	- It is a mechanism to put data inside the component

2) What is a component?
	- A function or class that returns an element

3) Which of these component types are valid?
	- Class Component
	- Component Function

4) What is the state of a component?
	El estado de un componente es el valor o la informacion determinada que posee 
	un componente en un momento dado de la aplicacion.

5) What are the component lifecycle methods?

6) How would you set the state of a component?
	El estado de un componente se puede se puede setear o modificar
	usando los Kook. Son funciones especiales que permiten trabajar
	con estados en componentes funcionales.
	En el caso de que estemos usando un componente de clase, solo tenemos
	que hacer referencia a la propiedad "state" del componente.

7) Which of these implementations change the state of a component?
	-this.setState({ value: "my value" })

8) What happens when we change the state of a component?
	Cuando cambiamos el estado de un componente, cambia la forma o el valor de
	lo que se muestra en este.

9)
import React from 'react';

function Persona(props) {
	return (
      	<div className='contenedor-persona'>
     			<p className='nombre-persona'>
           			{props.nombre}
           		</p>
           		<p className='apellido-persona'>
            		{props.apellido}
            	</p>
            	<p className='dni-persona'>
				{props.dni}
			</p>
        	</div>
	);
}
export default Persona;

//y luego un componente que se encargue de listar las personas

import React from 'react';

function ListaPersonas() {
	const lista = [{.....}] //lista de personas dada
	
	return (
		<>
              {
                lista.map((persona) =>
                  <Persona
                    key={persona.id}
                    nombre={persona.firstname}
			  apellido={persona.lastname}
			  dni={persona.dni}
		      />
                )
              }
		</>
	);
}
export default ListaPersonas;